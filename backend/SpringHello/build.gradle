plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.3'
    id 'io.spring.dependency-management' version '1.1.7'
}

import java.nio.file.Files
import java.nio.file.Paths

def loadEnvVariables(envFilePath) {
    def env = [:]
    if (Files.exists(Paths.get(envFilePath))) {
        Files.readAllLines(Paths.get(envFilePath)).each { line ->
            if (!line.trim().startsWith("#") && line.contains("=")) {
                def parts = line.split("=", 2)
                env[parts[0].trim()] = parts[1].trim()
            }
        }
    }
    return env
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.postgresql:postgresql:42.6.0'
}

tasks.named('test') {
    useJUnitPlatform()
    def envFile = file("${project.projectDir}/.env")
    def loadedEnv = loadEnvVariables(envFile.absolutePath)
    environment = loadedEnv
}
